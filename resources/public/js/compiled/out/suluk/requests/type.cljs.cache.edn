{:rename-macros {}, :renames {}, :externs {Headers {prototype {append {}}}, fetch {}}, :use-macros {}, :excludes #{}, :name suluk.requests.type, :imports nil, :requires {constants suluk.constants.constants, suluk.constants.constants suluk.constants.constants}, :cljs.spec/speced-vars [], :uses nil, :defs {get-prop {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/type.cljs", :line 9, :column 8, :end-line 9, :end-column 16, :private true, :arglists (quote ([request]))}, :private true, :name suluk.requests.type/get-prop, :variadic false, :file "src/suluk/requests/type.cljs", :end-column 16, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request]))}, apply-all-fns->cFetch {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/type.cljs", :line 38, :column 8, :end-line 38, :end-column 29, :private true, :arglists (quote ([fetch-instance fs]))}, :private true, :name suluk.requests.type/apply-all-fns->cFetch, :variadic false, :file "src/suluk/requests/type.cljs", :end-column 29, :method-params ([fetch-instance fs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fetch-instance fs]))}, apply-catch->cFetch {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/type.cljs", :line 43, :column 8, :end-line 43, :end-column 27, :private true, :arglists (quote ([fetch-instance f]))}, :private true, :name suluk.requests.type/apply-catch->cFetch, :variadic false, :file "src/suluk/requests/type.cljs", :end-column 27, :method-params ([fetch-instance f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fetch-instance f]))}, ->Fetch-Request {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name suluk.requests.type/->Fetch-Request, :file "src/suluk/requests/type.cljs", :end-column 62, :type true, :column 47, :internal-ctor true, :line 4, :record true, :end-line 4, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :doc "A record type for fetch."}, get-function {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/type.cljs", :line 15, :column 8, :end-line 15, :end-column 20, :private true, :arglists (quote ([request function-name]))}, :private true, :name suluk.requests.type/get-function, :variadic false, :file "src/suluk/requests/type.cljs", :end-column 20, :method-params ([request function-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([request function-name]))}, ->request {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/type.cljs", :line 68, :column 7, :end-line 68, :end-column 16, :arglists (quote ([url & prop?-function-map?])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url prop?-function-map?)], :arglists ([url & prop?-function-map?]), :arglists-meta (nil)}}, :name suluk.requests.type/->request, :variadic true, :file "src/suluk/requests/type.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url prop?-function-map?)], :arglists ([url & prop?-function-map?]), :arglists-meta (nil)}, :method-params [(url prop?-function-map?)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists ([url & prop?-function-map?])}, get-function-map {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/type.cljs", :line 12, :column 8, :end-line 12, :end-column 24, :private true, :arglists (quote ([request]))}, :private true, :name suluk.requests.type/get-function-map, :variadic false, :file "src/suluk/requests/type.cljs", :end-column 24, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request]))}, get-url {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/type.cljs", :line 6, :column 8, :end-line 6, :end-column 15, :private true, :arglists (quote ([request]))}, :private true, :name suluk.requests.type/get-url, :variadic false, :file "src/suluk/requests/type.cljs", :end-column 15, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request]))}, process-function-map-on-cFetch {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/type.cljs", :line 48, :column 8, :end-line 48, :end-column 38, :private true, :arglists (quote ([fetch-instance f-map]))}, :private true, :name suluk.requests.type/process-function-map-on-cFetch, :variadic false, :file "src/suluk/requests/type.cljs", :end-column 38, :method-params ([fetch-instance f-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fetch-instance f-map]))}, request->cFetch {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/type.cljs", :line 27, :column 8, :end-line 27, :end-column 23, :private true, :arglists (quote ([request]))}, :private true, :name suluk.requests.type/request->cFetch, :variadic false, :file "src/suluk/requests/type.cljs", :end-column 23, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request]))}, ->fetch {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/type.cljs", :line 76, :column 7, :end-line 76, :end-column 14, :arglists (quote ([fetch-request]))}, :name suluk.requests.type/->fetch, :variadic false, :file "src/suluk/requests/type.cljs", :end-column 14, :method-params ([fetch-request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fetch-request]))}, apply-fn->cFetch {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/type.cljs", :line 33, :column 8, :end-line 33, :end-column 24, :private true, :arglists (quote ([fetch-instance f]))}, :private true, :name suluk.requests.type/apply-fn->cFetch, :variadic false, :file "src/suluk/requests/type.cljs", :end-column 24, :method-params ([fetch-instance f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fetch-instance f]))}, map->headers {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/type.cljs", :line 18, :column 8, :end-line 18, :end-column 20, :private true, :arglists (quote ([header-args]))}, :private true, :name suluk.requests.type/map->headers, :variadic false, :file "src/suluk/requests/type.cljs", :end-column 20, :method-params ([header-args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([header-args]))}, ->->Fetch-Request {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/type.cljs", :line 4, :column 47, :end-line 4, :end-column 62, :doc "A record type for fetch.", :internal-ctor true, :factory :positional, :arglists (quote ([url prop function-map]))}, :name suluk.requests.type/->->Fetch-Request, :variadic false, :file "src/suluk/requests/type.cljs", :end-column 62, :method-params ([url prop function-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 4, :end-line 4, :max-fixed-arity 3, :fn-var true, :arglists (quote ([url prop function-map])), :doc "A record type for fetch."}, map->->Fetch-Request {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/type.cljs", :line 4, :column 47, :end-line 4, :end-column 62, :doc "A record type for fetch.", :internal-ctor true, :factory :map, :arglists (quote ([G__54604]))}, :name suluk.requests.type/map->->Fetch-Request, :variadic false, :file "src/suluk/requests/type.cljs", :end-column 62, :method-params ([G__54604]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__54604])), :doc "A record type for fetch."}, process-headers {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/type.cljs", :line 24, :column 8, :end-line 24, :end-column 23, :private true, :arglists (quote ([fetch-request]))}, :private true, :name suluk.requests.type/process-headers, :variadic false, :file "src/suluk/requests/type.cljs", :end-column 23, :method-params ([fetch-request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fetch-request]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:fns function-map :status-safe-f :param-f :else :done-f :fail-f :headers :prop :url prop :function-map url}, :order [:url :prop :function-map url prop function-map :headers :param-f :status-safe-f :fail-f :done-f :fns :else]}, :doc nil}