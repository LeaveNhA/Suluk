{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{get}, :name suluk.requests.get, :imports nil, :requires {cs suluk.constants.constants, suluk.constants.constants suluk.constants.constants, t suluk.requests.type, suluk.requests.type suluk.requests.type, r suluk.response, suluk.response suluk.response}, :cljs.spec/speced-vars [], :uses nil, :defs {get {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/get.cljs", :line 6, :column 7, :end-line 6, :end-column 10, :arglists (quote ([url & prop?-function-map?])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url prop?-function-map?)], :arglists ([url & prop?-function-map?]), :arglists-meta (nil)}}, :name suluk.requests.get/get, :variadic true, :file "/Users/sckn/projects/open-source/suluk/src/suluk/requests/get.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(url prop?-function-map?)], :arglists ([url & prop?-function-map?]), :arglists-meta (nil)}, :method-params [(url prop?-function-map?)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists ([url & prop?-function-map?])}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:method :default :prop}, :order [:default :prop :method]}, :doc nil}