{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name suluk.core, :imports nil, :requires {suluk.process suluk.process}, :cljs.spec/speced-vars [], :uses nil, :defs {fetch! {:name suluk.core/fetch!, :file "/Users/sckn/projects/open-source/suluk/src/suluk/core.cljs", :line 4, :column 1, :end-line 25, :end-column 9, :doc "Takes Request Type as Keyword,\n   Process;\n\n   :get -> (fn [URL & function-map])\n   |> URL: Get Request URL address.\n   |> function-map: A map contains Parameter, Fail, Done and `Rest` functions.\n      Additionally, it contains middle-ware functions to allow you to do data manipulations on your response with `rest-fs`.\n\n   :post -> (fn [URL, DATA, & function-map])\n   |> URL: Get Request URL address.\n   |> DATA: Your Payload.\n   |> function-map: A map contains Parameter, Fail and Done functions.\n      Additionally, it contains middle-ware functions to allow you to do data manipulations on your response with `rest-fs`.\n\n   :post-json -> (fn [URL, DATA, & function-map])\n   |> URL: Get Request URL address.\n   |> DATA: Your Payload. But, implicitly converted JSON with JSON/stringify.\n   |> function-map: A map contains Parameter, Fail and Done functions.\n      Additionally, it contains middle-ware functions to allow you to do data manipulations on your response with `rest-fs`.\n\n   `rest-fs` is sequentially process your data. One function's output is input data for the next.", :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/core.cljs", :line 25, :column 3, :end-line 25, :end-column 9, :doc "Takes Request Type as Keyword,\n   Process;\n\n   :get -> (fn [URL & function-map])\n   |> URL: Get Request URL address.\n   |> function-map: A map contains Parameter, Fail, Done and `Rest` functions.\n      Additionally, it contains middle-ware functions to allow you to do data manipulations on your response with `rest-fs`.\n\n   :post -> (fn [URL, DATA, & function-map])\n   |> URL: Get Request URL address.\n   |> DATA: Your Payload.\n   |> function-map: A map contains Parameter, Fail and Done functions.\n      Additionally, it contains middle-ware functions to allow you to do data manipulations on your response with `rest-fs`.\n\n   :post-json -> (fn [URL, DATA, & function-map])\n   |> URL: Get Request URL address.\n   |> DATA: Your Payload. But, implicitly converted JSON with JSON/stringify.\n   |> function-map: A map contains Parameter, Fail and Done functions.\n      Additionally, it contains middle-ware functions to allow you to do data manipulations on your response with `rest-fs`.\n\n   `rest-fs` is sequentially process your data. One function's output is input data for the next."}}}, :cljs.spec/registry-ref [], :require-macros nil, :doc nil}