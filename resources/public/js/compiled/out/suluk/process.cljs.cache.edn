{:rename-macros {}, :renames {}, :externs {Error {}, document {getElementById {}}}, :use-macros {}, :excludes #{}, :name suluk.process, :imports nil, :requires {rc suluk.requests.core, suluk.requests.core suluk.requests.core}, :cljs.spec/speced-vars [], :uses nil, :defs {classify {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/process.cljs", :line 4, :column 8, :end-line 4, :end-column 16, :private true, :arglists (quote ([fs]))}, :private true, :name suluk.process/classify, :variadic false, :file "/Users/sckn/projects/open-source/suluk/src/suluk/process.cljs", :end-column 16, :method-params ([fs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fs]))}, fetch! {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/process.cljs", :line 10, :column 7, :end-line 10, :end-column 13, :arglists (quote ([r-type url & args])), :doc "Takes Request Type as Keyword,\n   Process;\n\n   :get -> (fn [URL & function-map])\n   |> URL: Get Request URL address.\n   |> function-map: A map contains Parameter, Fail, Done and `Rest` functions.\n      Additionally, it contains middle-ware functions to allow you to do data manipulations on your response with `rest-fs`.\n\n   :post -> (fn [URL, DATA, & function-map])\n   |> URL: Get Request URL address.\n   |> DATA: Your Payload.\n   |> function-map: A map contains Parameter, Fail and Done functions.\n      Additionally, it contains middle-ware functions to allow you to do data manipulations on your response with `rest-fs`.\n\n   :post-json -> (fn [URL, DATA, & function-map])\n   |> URL: Get Request URL address.\n   |> DATA: Your Payload. But, implicitly converted JSON with JSON/stringify.\n   |> function-map: A map contains Parameter, Fail and Done functions.\n      Additionally, it contains middle-ware functions to allow you to do data manipulations on your response with `rest-fs`.\n\n   `rest-fs` is sequentially process your data. One function's output is input data for the next.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(r-type url args)], :arglists ([r-type url & args]), :arglists-meta (nil)}}, :name suluk.process/fetch!, :variadic true, :file "/Users/sckn/projects/open-source/suluk/src/suluk/process.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(r-type url args)], :arglists ([r-type url & args]), :arglists-meta (nil)}, :method-params [(r-type url args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists ([r-type url & args]), :doc "Takes Request Type as Keyword,\n   Process;\n\n   :get -> (fn [URL & function-map])\n   |> URL: Get Request URL address.\n   |> function-map: A map contains Parameter, Fail, Done and `Rest` functions.\n      Additionally, it contains middle-ware functions to allow you to do data manipulations on your response with `rest-fs`.\n\n   :post -> (fn [URL, DATA, & function-map])\n   |> URL: Get Request URL address.\n   |> DATA: Your Payload.\n   |> function-map: A map contains Parameter, Fail and Done functions.\n      Additionally, it contains middle-ware functions to allow you to do data manipulations on your response with `rest-fs`.\n\n   :post-json -> (fn [URL, DATA, & function-map])\n   |> URL: Get Request URL address.\n   |> DATA: Your Payload. But, implicitly converted JSON with JSON/stringify.\n   |> function-map: A map contains Parameter, Fail and Done functions.\n      Additionally, it contains middle-ware functions to allow you to do data manipulations on your response with `rest-fs`.\n\n   `rest-fs` is sequentially process your data. One function's output is input data for the next."}, value->app! {:protocol-inline nil, :meta {:file "/Users/sckn/projects/open-source/suluk/src/suluk/process.cljs", :line 37, :column 8, :end-line 37, :end-column 19, :private true, :arglists (quote ([vid v]))}, :private true, :name suluk.process/value->app!, :variadic false, :file "/Users/sckn/projects/open-source/suluk/src/suluk/process.cljs", :end-column 19, :method-params ([vid v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vid v]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:get :post :post-json}, :order [:get :post :post-json]}, :doc nil}